{{!
| Copyright (c) 2013, Kenton Varda <temporal@gmail.com>
| All rights reserved.
|
| Redistribution and use in source and binary forms, with or without
| modification, are permitted provided that the following conditions are met:
|
| 1. Redistributions of source code must retain the above copyright notice, this
|    list of conditions and the following disclaimer.
| 2. Redistributions in binary form must reproduce the above copyright notice,
|    this list of conditions and the following disclaimer in the documentation
|    and/or other materials provided with the distribution.
|
| THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
| ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
| WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
| DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
| ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
| (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
| LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
| ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
| (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
| SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Template for generated C++ header files.
}}// Generated code, DO NOT EDIT

#ifndef {{fileIncludeGuard}}
#define {{fileIncludeGuard}}

#include <capnp/generated-header-support.h>
{{#fileImports}}
{{#importIsSystem}}
#include <{{importFilename}}.h>
{{/importIsSystem}}
{{^importIsSystem}}
#include "{{importFilename}}.h"
{{/importIsSystem}}
{{/fileImports}}

{{#fileNamespaces}}
namespace {{namespaceName}} {
{{/fileNamespaces}}
{{! =========================================================================================== }}
{{#fileTypes}}
{{#typeStructOrUnion}}

struct {{typeFullName}} {
  {{typeName}}() = delete;

  class Reader;
  class Builder;
{{#typeStruct}}
{{#structNestedStructs}}
  struct {{nestedName}};
{{/structNestedStructs}}
{{#structUnions}}
  struct {{unionTitleCase}};
{{/structUnions}}
{{#structNestedInterfaces}}
  struct {{nestedName}};
{{/structNestedInterfaces}}
{{#structNestedEnums}}

  enum class {{enumName}}: uint16_t {
{{#enumerants}}
    {{enumerantName}} = {{enumerantNumber}},
{{/enumerants}}
  };
{{/structNestedEnums}}
{{/typeStruct}}
{{#typeUnion}}

  enum Which: uint16_t {
{{#unionFields}}
    {{fieldUpperCase}} = {{fieldUnionDiscriminant}},
{{/unionFields}}
  };
{{/typeUnion}}

private:
{{#typeFields}}
{{#fieldDefaultBytes}}
  static const ::capnp::_::AlignedData<{{defaultWordCount}}> DEFAULT_{{fieldUpperCase}};
{{/fieldDefaultBytes}}
{{/typeFields}}
};
{{/typeStructOrUnion}}
{{/fileTypes}}
{{! ------------------------------------------------------------------------------------------- }}
{{#fileEnums}}

enum class {{enumName}}: uint16_t {
{{#enumerants}}
  {{enumerantName}} = {{enumerantNumber}},
{{/enumerants}}
};
{{/fileEnums}}
{{! =========================================================================================== }}

{{#fileNamespaces}}
}  // namespace
{{/fileNamespaces}}

namespace capnp {
namespace schemas {
{{#fileTypes}}
{{#typeSchema}}
extern const ::capnp::_::RawSchema s_{{schemaId}};
{{/typeSchema}}
{{/fileTypes}}
}  // namespace schemas
namespace _ {  // private
{{#fileTypes}}
{{#typeStructOrUnion}}
{{#typeStruct}}
CAPNP_DECLARE_STRUCT(
    ::{{#fileNamespaces}}{{namespaceName}}::{{/fileNamespaces}}{{typeFullName}}, {{structId}},
    {{structDataSize}}, {{structPointerCount}}, {{structPreferredListEncoding}});
{{#structNestedEnums}}
CAPNP_DECLARE_ENUM(
    ::{{#fileNamespaces}}{{namespaceName}}::{{/fileNamespaces}}{{typeFullName}}::{{enumName}}, {{enumId}});
{{/structNestedEnums}}
{{#structUnions}}
CAPNP_DECLARE_UNION(
    ::{{#fileNamespaces}}{{namespaceName}}::{{/fileNamespaces}}{{structFullName}}::{{unionTitleCase}},
    ::{{#fileNamespaces}}{{namespaceName}}::{{/fileNamespaces}}{{structFullName}}, {{unionIndex}});
{{/structUnions}}
{{/typeStruct}}
{{/typeStructOrUnion}}
{{/fileTypes}}
{{#fileEnums}}
CAPNP_DECLARE_ENUM(
    ::{{#fileNamespaces}}{{namespaceName}}::{{/fileNamespaces}}{{enumName}}, {{enumId}});
{{/fileEnums}}
}  // namespace capnp
}  // namespace _ (private)

{{#fileNamespaces}}
namespace {{namespaceName}} {
{{/fileNamespaces}}

{{! =========================================================================================== }}
{{#fileTypes}}
{{#typeStructOrUnion}}

class {{typeFullName}}::Reader {
public:
  typedef {{typeName}} Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}
{{#typeStruct}}

  inline size_t totalSizeInWords() const {
    return _reader.totalSize() / ::capnp::WORDS;
  }
{{#structUnions}}

  // {{unionDecl}}
  inline {{unionTitleCase}}::Reader get{{unionTitleCase}}() const;
{{/structUnions}}
{{/typeStruct}}
{{#typeUnion}}

  inline Which which() const;
{{/typeUnion}}
{{#typeFields}}

  // {{fieldDecl}}
{{#fieldIsPrimitive}}
  inline {{fieldType}} get{{fieldTitleCase}}() const;
{{/fieldIsPrimitive}}
{{^fieldIsPrimitive}}
  inline bool has{{fieldTitleCase}}() const;
{{^fieldIsGenericObject}}
  inline {{fieldType}}::Reader get{{fieldTitleCase}}() const;
{{/fieldIsGenericObject}}
{{/fieldIsPrimitive}}
{{#fieldIsGenericObject}}
  template <typename T> inline typename T::Reader get{{fieldTitleCase}}() const;
  template <typename T, typename Param> inline typename T::Reader
      get{{fieldTitleCase}}(Param&& param) const;
{{/fieldIsGenericObject}}
{{/typeFields}}
private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::String KJ_STRINGIFY({{typeFullName}}::Reader reader);
};

inline ::kj::String KJ_STRINGIFY({{typeFullName}}::Reader reader) {
{{#typeStruct}}
  return ::capnp::_::structString<{{typeFullName}}>(reader._reader);
{{/typeStruct}}
{{#typeUnion}}
  return ::capnp::_::unionString<{{typeFullName}}>(reader._reader);
{{/typeUnion}}
}

{{! ------------------------------------------------------------------------------------------- }}

class {{typeFullName}}::Builder {
public:
  typedef {{typeName}} Builds;

  Builder() = default;
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }
{{#typeStruct}}

  inline size_t totalSizeInWords() { return asReader().totalSizeInWords(); }
{{#structUnions}}

  // {{unionDecl}}
  inline {{unionTitleCase}}::Builder get{{unionTitleCase}}();
{{/structUnions}}
{{/typeStruct}}
{{#typeUnion}}

  inline Which which();
{{/typeUnion}}
{{#typeFields}}

  // {{fieldDecl}}
{{#fieldIsPrimitive}}
  inline {{fieldType}} get{{fieldTitleCase}}();
  inline void set{{fieldTitleCase}}({{fieldType}} value);
{{/fieldIsPrimitive}}
{{^fieldIsPrimitive}}
  inline bool has{{fieldTitleCase}}();
{{^fieldIsGenericObject}}
  inline {{fieldType}}::Builder get{{fieldTitleCase}}();
  inline void set{{fieldTitleCase}}({{fieldType}}::Reader other);
{{#fieldIsNonStructList}}
  inline void set{{fieldTitleCase}}(
      std::initializer_list<{{fieldElementReaderType}}> other);
{{/fieldIsNonStructList}}
{{#fieldIsListOrBlob}}
  inline {{fieldType}}::Builder init{{fieldTitleCase}}(unsigned int size);
{{/fieldIsListOrBlob}}
{{#fieldIsStruct}}
  inline {{fieldType}}::Builder init{{fieldTitleCase}}();
{{/fieldIsStruct}}
  inline void adopt{{fieldTitleCase}}(::capnp::Orphan<{{fieldType}}>&& value);
  inline ::capnp::Orphan<{{fieldType}}> disown{{fieldTitleCase}}();
{{/fieldIsGenericObject}}
{{/fieldIsPrimitive}}
{{#fieldIsGenericObject}}
  template <typename T> inline typename T::Builder get{{fieldTitleCase}}();
  template <typename T, typename Param> inline typename T::Builder
      get{{fieldTitleCase}}(Param&& param);
  template <typename T> inline void set{{fieldTitleCase}}(typename T::Reader value);
  template <typename T, typename U> inline void
      set{{fieldTitleCase}}(std::initializer_list<U> value);
  template <typename T, typename... Params> inline typename T::Builder
      init{{fieldTitleCase}}(Params&&... params);
  template <typename T> void adopt{{fieldTitleCase}}(::capnp::Orphan<T>&& value);
  template <typename T, typename... Params> ::capnp::Orphan<T>
      disown{{fieldTitleCase}}(Params&&... params);
{{/fieldIsGenericObject}}
{{/typeFields}}
private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::String KJ_STRINGIFY({{typeFullName}}::Builder builder);
};

inline ::kj::String KJ_STRINGIFY({{typeFullName}}::Builder builder) {
{{#typeStruct}}
  return ::capnp::_::structString<{{typeFullName}}>(builder._builder.asReader());
{{/typeStruct}}
{{#typeUnion}}
  return ::capnp::_::unionString<{{typeFullName}}>(builder._builder.asReader());
{{/typeUnion}}
}
{{/typeStructOrUnion}}
{{/fileTypes}}
{{! =========================================================================================== }}
{{#fileTypes}}
{{#typeStructOrUnion}}
{{#typeStruct}}
{{#structUnions}}

inline {{unionFullName}}::Reader {{structFullName}}::Reader::get{{unionTitleCase}}() const {
  return {{unionFullName}}::Reader(_reader);
}

inline {{unionFullName}}::Builder {{structFullName}}::Builder::get{{unionTitleCase}}() {
  return {{unionFullName}}::Builder(_builder);
}
{{/structUnions}}
{{/typeStruct}}
{{#typeUnion}}

// {{unionFullName}}
inline {{unionFullName}}::Which {{unionFullName}}::Reader::which() const {
  return _reader.getDataField<Which>({{unionTagOffset}} * ::capnp::ELEMENTS);
}

inline {{unionFullName}}::Which {{unionFullName}}::Builder::which() {
  return _builder.getDataField<Which>({{unionTagOffset}} * ::capnp::ELEMENTS);
}
{{/typeUnion}}
{{! ------------------------------------------------------------------------------------------- }}
{{#typeFields}}

// {{typeFullName}}::{{fieldDecl}}
{{! ------------------------------------------------------------------------------------------- }}
{{#fieldIsPrimitive}}
inline {{fieldType}} {{typeFullName}}::Reader::get{{fieldTitleCase}}() const {
{{#fieldUnion}}
  KJ_IREQUIRE(which() == {{unionTitleCase}}::{{fieldUpperCase}},
              "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return _reader.getDataField<{{fieldType}}>(
      {{fieldOffset}} * ::capnp::ELEMENTS{{fieldDefaultMask}});
}

inline {{fieldType}} {{typeFullName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  KJ_IREQUIRE(which() == {{unionTitleCase}}::{{fieldUpperCase}},
              "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return _builder.getDataField<{{fieldType}}>(
      {{fieldOffset}} * ::capnp::ELEMENTS{{fieldDefaultMask}});
}
inline void {{typeFullName}}::Builder::set{{fieldTitleCase}}({{fieldType}} value{{fieldSetterDefault}}) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnp::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  _builder.setDataField<{{fieldType}}>(
      {{fieldOffset}} * ::capnp::ELEMENTS, value{{fieldDefaultMask}});
}
{{/fieldIsPrimitive}}
{{! ------------------------------------------------------------------------------------------- }}
{{^fieldIsPrimitive}}
inline bool {{typeFullName}}::Reader::has{{fieldTitleCase}}() const {
  return !_reader.isPointerFieldNull({{fieldOffset}} * ::capnp::POINTERS);
}

inline bool {{typeFullName}}::Builder::has{{fieldTitleCase}}() {
  return !_builder.isPointerFieldNull({{fieldOffset}} * ::capnp::POINTERS);
}

{{^fieldIsGenericObject}}
inline {{fieldType}}::Reader {{typeFullName}}::Reader::get{{fieldTitleCase}}() const {
{{#fieldUnion}}
  KJ_IREQUIRE(which() == {{unionTitleCase}}::{{fieldUpperCase}},
              "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return ::capnp::_::PointerHelpers<{{fieldType}}>::get(
      _reader, {{fieldOffset}} * ::capnp::POINTERS{{#fieldDefaultBytes}},
      DEFAULT_{{fieldUpperCase}}.words{{#fieldIsBlob}}, {{defaultBlobSize}}{{/fieldIsBlob}}{{/fieldDefaultBytes}});
}

inline {{fieldType}}::Builder {{typeFullName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  KJ_IREQUIRE(which() == {{unionTitleCase}}::{{fieldUpperCase}},
              "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return ::capnp::_::PointerHelpers<{{fieldType}}>::get(
      _builder, {{fieldOffset}} * ::capnp::POINTERS{{#fieldDefaultBytes}},
      DEFAULT_{{fieldUpperCase}}.words{{#fieldIsBlob}}, {{defaultBlobSize}}{{/fieldIsBlob}}{{/fieldDefaultBytes}});
}

inline void {{typeFullName}}::Builder::set{{fieldTitleCase}}({{fieldType}}::Reader value) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnp::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  ::capnp::_::PointerHelpers<{{fieldType}}>::set(
      _builder, {{fieldOffset}} * ::capnp::POINTERS, value);
}

{{#fieldIsNonStructList}}
inline void {{typeFullName}}::Builder::set{{fieldTitleCase}}(
    std::initializer_list<{{fieldElementReaderType}}> value) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnp::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  ::capnp::_::PointerHelpers<{{fieldType}}>::set(
      _builder, {{fieldOffset}} * ::capnp::POINTERS, value);
}

{{/fieldIsNonStructList}}
{{#fieldIsListOrBlob}}
inline {{fieldType}}::Builder {{typeFullName}}::Builder::init{{fieldTitleCase}}(unsigned int size) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnp::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return ::capnp::_::PointerHelpers<{{fieldType}}>::init(
      _builder, {{fieldOffset}} * ::capnp::POINTERS, size);
}

{{/fieldIsListOrBlob}}
{{#fieldIsStruct}}
inline {{fieldType}}::Builder {{typeFullName}}::Builder::init{{fieldTitleCase}}() {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnp::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return ::capnp::_::PointerHelpers<{{fieldType}}>::init(
      _builder, {{fieldOffset}} * ::capnp::POINTERS);
}

{{/fieldIsStruct}}

inline void {{typeFullName}}::Builder::adopt{{fieldTitleCase}}(
    ::capnp::Orphan<{{fieldType}}>&& value) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnp::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  ::capnp::_::PointerHelpers<{{fieldType}}>::adopt(
      _builder, {{fieldOffset}} * ::capnp::POINTERS, kj::mv(value));
}

inline ::capnp::Orphan<{{fieldType}}> {{typeFullName}}::Builder::disown{{fieldTitleCase}}() {
{{#fieldUnion}}
  KJ_IREQUIRE(which() == {{unionTitleCase}}::{{fieldUpperCase}},
              "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return ::capnp::_::PointerHelpers<{{fieldType}}>::disown(
      _builder, {{fieldOffset}} * ::capnp::POINTERS);
}

{{/fieldIsGenericObject}}
{{! ------------------------------------------------------------------------------------------- }}
{{#fieldIsGenericObject}}
template <typename T>
inline typename T::Reader {{typeFullName}}::Reader::get{{fieldTitleCase}}() const {
{{#fieldUnion}}
  KJ_IREQUIRE(which() == {{unionTitleCase}}::{{fieldUpperCase}},
              "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return ::capnp::_::PointerHelpers<T>::get(
      _reader, {{fieldOffset}} * ::capnp::POINTERS);
}

template <typename T>
inline typename T::Builder {{typeFullName}}::Builder::get{{fieldTitleCase}}() {
{{#fieldUnion}}
  KJ_IREQUIRE(which() == {{unionTitleCase}}::{{fieldUpperCase}},
              "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return ::capnp::_::PointerHelpers<T>::get(
      _builder, {{fieldOffset}} * ::capnp::POINTERS);
}

template <typename T, typename Param>
inline typename T::Reader {{typeFullName}}::Reader::get{{fieldTitleCase}}(Param&& param) const {
{{#fieldUnion}}
  KJ_IREQUIRE(which() == {{unionTitleCase}}::{{fieldUpperCase}},
              "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return ::capnp::_::PointerHelpers<T>::getDynamic(
      _reader, {{fieldOffset}} * ::capnp::POINTERS, ::kj::fwd<Param>(param));
}

template <typename T, typename Param>
inline typename T::Builder {{typeFullName}}::Builder::get{{fieldTitleCase}}(Param&& param) {
{{#fieldUnion}}
  KJ_IREQUIRE(which() == {{unionTitleCase}}::{{fieldUpperCase}},
              "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return ::capnp::_::PointerHelpers<T>::getDynamic(
      _builder, {{fieldOffset}} * ::capnp::POINTERS, ::kj::fwd<Param>(param));
}

template <typename T>
inline void {{typeFullName}}::Builder::set{{fieldTitleCase}}(typename T::Reader value) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnp::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  ::capnp::_::PointerHelpers<T>::set(
      _builder, {{fieldOffset}} * ::capnp::POINTERS, value);
}

template <typename T, typename U>
inline void {{typeFullName}}::Builder::set{{fieldTitleCase}}(std::initializer_list<U> value) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnp::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  ::capnp::_::PointerHelpers<T>::set(
      _builder, {{fieldOffset}} * ::capnp::POINTERS, value);
}

template <typename T, typename... Params>
inline typename T::Builder {{typeFullName}}::Builder::init{{fieldTitleCase}}(Params&&... params) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnp::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  return ::capnp::_::PointerHelpers<T>::init(
      _builder, {{fieldOffset}} * ::capnp::POINTERS, ::kj::fwd<Params>(params)...);
}

template <typename T>
void {{typeFullName}}::Builder::adopt{{fieldTitleCase}}(::capnp::Orphan<T>&& value) {
{{#fieldUnion}}
  _builder.setDataField<{{unionTitleCase}}::Which>(
      {{unionTagOffset}} * ::capnp::ELEMENTS, {{unionTitleCase}}::{{fieldUpperCase}});
{{/fieldUnion}}
  ::capnp::_::PointerHelpers<T>::adopt(
      _builder, {{fieldOffset}} * ::capnp::POINTERS, kj::mv(value));
}

template <typename T, typename... Params>
::capnp::Orphan<T> {{typeFullName}}::Builder::disown{{fieldTitleCase}}(Params&&... params) {
{{#fieldUnion}}
  KJ_IREQUIRE(which() == {{unionTitleCase}}::{{fieldUpperCase}},
              "Must check which() before get()ing a union member.");
{{/fieldUnion}}
  return ::capnp::_::PointerHelpers<T>::disown(
      _builder, {{fieldOffset}} * ::capnp::POINTERS, ::kj::fwd<Params>(params)...);
}

{{/fieldIsGenericObject}}
{{/fieldIsPrimitive}}
{{/typeFields}}
{{/typeStructOrUnion}}
{{/fileTypes}}
{{! =========================================================================================== }}

{{#fileNamespaces}}
}  // namespace
{{/fileNamespaces}}
#endif  // {{fileIncludeGuard}}
